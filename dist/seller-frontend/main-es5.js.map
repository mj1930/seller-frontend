{"version":3,"sources":["webpack:///src/app/services/shared/toast.service.ts","webpack:///src/environments/environment.ts","webpack:///src/app/http-interceptor/http-interceptor.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/authentication/auth.service.ts","webpack:///src/app/http-interceptor/index.ts","webpack:///src/app/app.module.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/authentication/register/register.component.ts","webpack:///src/app/authentication/register/register.component.html"],"names":["ToastService","matSnackbar","msg","horizontalPosition","verticalPosition","open","duration","providedIn","environment","production","apiUrl","adminApiUrl","AuthInterceptor","baseUrl","request","next","url","includes","requestObject","setHeaders","Authorization","sessionStorage","getItem","Accept","authReq","clone","handle","pipe","handleError","error","AppComponent","title","selector","templateUrl","styleUrls","AuthService","http","token","req","post","httpInterceptorProviders","provide","useClass","multi","AppModule","forRoot","declarations","imports","providers","bootstrap","routes","path","pathMatch","redirectTo","loadChildren","then","module","AuthenticationModule","ProductModule","InventoryModule","SellerModule","component","AppRoutingModule","exports","bootstrapModule","err","console","webpackEmptyAsyncContext","Promise","resolve","e","Error","code","keys","id","RegisterComponent","fb","authService","router","toastService","mobile","registerSteps","step1","step2","step3","show","cpShow","password","cfPassword","registerForm","group","name","required","email","minLength","confirmPassword","valid","submitFormAttempt","reqData","controls","value","register","subscribe","data","log","openSnackbar","message","navigateByUrl"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport {\n  MatSnackBar,\n  MatSnackBarHorizontalPosition,\n  MatSnackBarVerticalPosition\n} from \"@angular/material/snack-bar\";\n@Injectable({\n  providedIn: \"root\"\n})\nexport class ToastService {\n  constructor(private matSnackbar: MatSnackBar) {}\n\n  openSnackbar(msg: string) {\n    const horizontalPosition: MatSnackBarHorizontalPosition = \"center\";\n    const verticalPosition: MatSnackBarVerticalPosition = \"top\";\n\n    this.matSnackbar.open(msg, \"End Now\", {\n      duration: 1000,\n      horizontalPosition: horizontalPosition,\n      verticalPosition: verticalPosition\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:3003/',\n  adminApiUrl: 'http://localhost:3002/'\n};\n\n//AIzaSyCFPRapf51Ws6ELOHUpYPpvofDeen4EZsI\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { HttpErrorResponse, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n    baseUrl = \"\";\n\n    constructor() { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler) {\n        if(request.url.includes('category')) {\n            this.baseUrl = environment.adminApiUrl;\n        }\n        else if(request.url.includes('maps')) {\n            this.baseUrl = '';\n        } else {\n            this.baseUrl = environment.apiUrl;\n        }\n        let requestObject = {\n            url: `${this.baseUrl}${request.url}`,\n            setHeaders: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${sessionStorage.getItem('token')}`,\n                Accept: 'application/json'\n            }\n        };\n\n        if (request.url === 'users/admin/export') {\n            requestObject['responseType'] = 'blob';\n        }\n\n        if(request.url.includes('products/add-product-images')) {\n            delete requestObject['setHeaders']['Content-Type'];\n            delete requestObject['setHeaders']['Accept']; \n        }\n\n        const authReq = request.clone(requestObject);\n        return next.handle(authReq).pipe(\n            catchError(this.handleError)\n        );\n    }\n\n    handleError(error: HttpErrorResponse) {\n        return throwError(error);\n    }\n}","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'seller-frontend';\n}\n","<router-outlet></router-outlet>","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { catchError } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class AuthService {\n  error = \"\";\n  constructor(private http: HttpClient) {}\n\n  public isAuthenticated(): boolean {\n    const token = sessionStorage.getItem(\"token\");\n    return token ? true : false;\n  }\n\n  register(req) {\n    return this.http.post(\"users/signup\", req);\n  }\n\n  login(req) {\n    return this.http.post(\"users/login\", req).pipe(\n      catchError(error => {\n        return error;\n      })\n    );\n  }\n\n  generateOtp(req) {\n    return this.http.post(\"verify/generate-otp\", req);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AuthInterceptor } from './http-interceptor';\n\nexport const httpInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\n];","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\n\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\n// import { RegisterComponent } from './authentication/register/register.component';\nimport { MDBBootstrapModule } from \"angular-bootstrap-md\";\nimport { ReactiveFormsModule, FormsModule } from \"@angular/forms\";\n// import { AuthService } from './authentication/auth.service';\nimport { HttpClientModule } from \"@angular/common/http\";\n// import { SellerService } from './seller/seller.service';\nimport { httpInterceptorProviders } from \"./http-interceptor\";\n// import { ProductService } from './product/product.service';\n\nimport { SellerListingComponent } from \"./seller/seller-listing/seller-listing.component\";\nimport { SellerProductListingComponent } from \"./seller/seller-product-listing/seller-product-listing.component\";\nimport { SellerProfilePageComponent } from \"./seller/seller-profile-page/seller-profile-page.component\";\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n@NgModule({\n  declarations: [\n    AppComponent\n    //RegisterComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    MDBBootstrapModule.forRoot(),\n    ReactiveFormsModule,\n    FormsModule,\n    HttpClientModule,\n    MatSnackBarModule,\n    BrowserAnimationsModule\n  ],\n  providers: [httpInterceptorProviders],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './authentication/login/login.component';\n// import { AddProductsComponent } from './add-products/add-products.component';\n// import { LoginComponent } from './auth1/login/login.component';\nimport { RegisterComponent } from './authentication/register/register.component';\n// import { ManageInventoryComponent } from './inventory/manage-inventory/manage-inventory.component';\n// import { SellerActiveDashboardComponent } from './seller-active-dashboard/seller-active-dashboard.component';\n// import { SellerEmailVerifiedComponent } from './seller1/seller-email-verified/seller-email-verified.component';\n// import { SellerBankDetailsComponent } from './seller1/seller-bank-details/seller-bank-details.component';\n// import { SellerDashboardComponent } from './seller1/seller-dashboard/seller-dashboard.component';\n// import { SellerGstinDetailsComponent } from './seller1/seller-gstin-details/seller-gstin-details.component';\n// import { SellerWelcomePageComponent } from './seller1/seller-welcome-page/seller-welcome-page.component';\n\nconst routes: Routes = [\n  {path: '', pathMatch: 'full', redirectTo: '/auth/register'},\n  // {path: 'login', component: LoginComponent},\n  // {path: 'register', component: RegisterComponent},\n   {path: 'auth', loadChildren: () => import('./authentication/authentication.module').then(module => module.AuthenticationModule)},\n   {path: 'product', loadChildren: () => import('./product/product.module').then(module => module.ProductModule)},\n   {path: 'inventory', loadChildren: () => import('./inventory/inventory.module').then(module => module.InventoryModule)},\n   {path: 'seller', loadChildren: () => import('./seller/seller.module').then(module => module.SellerModule)},\n  {path: '**', component: RegisterComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators, FormGroup } from \"@angular/forms\";\nimport { AuthService } from \"../auth.service\";\nimport { Router } from \"@angular/router\";\nimport { ToastService } from \"src/app/services/shared/toast.service\";\n\n@Component({\n  selector: \"app-register\",\n  templateUrl: \"./register.component.html\",\n  styleUrls: [\"./register.component.css\"]\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n  submitFormAttempt: boolean;\n  mobile = null;\n  registerSteps = {\n    step1: true,\n    step2: false,\n    step3: false\n  };\n  show = false;\n  cpShow = false;\n  password: any;\n  cfPassword: any;\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private toastService: ToastService\n  ) {}\n\n  ngOnInit(): void {\n    this.password = \"password\";\n    this.cfPassword = \"password\";\n    this.registerForm = this.fb.group({\n      name: [\"\", [Validators.required]],\n      email: [\"\", [Validators.email, Validators.required]],\n      password: [\"\", [Validators.required, Validators.minLength(6)]],\n      confirmPassword: [\"\", [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  generateOtp(valid) {\n    if (!valid) {\n      return;\n    }\n    // this.authService.generateOtp({mobileNum:this.mobile}).subscribe(data => {\n    //   console.log('dataaaa',data);\n    //   this.registerSteps.step1 = false;\n    //   this.registerSteps.step3 = true;\n    // }, error => {\n    //   console.log(error);\n    // })\n\n    this.registerSteps.step1 = false;\n    this.registerSteps.step3 = true;\n\n    //console.log('12121', this.mobile)\n  }\n\n  submitRegisterForm(valid) {\n    this.submitFormAttempt = true;\n    if (!valid) {\n      return;\n    }\n    let reqData = {\n      mobile: this.mobile,\n      name: this.registerForm.controls[\"name\"].value,\n      email: this.registerForm.controls[\"email\"].value,\n      password: this.registerForm.controls[\"password\"].value\n    };\n\n    this.authService.register(reqData).subscribe(\n      (data: any) => {\n        console.log(data);\n        if (data.code === 400) {\n          this.toastService.openSnackbar(data.message);\n        } else {\n          this.router.navigateByUrl(\"/auth/login\");\n        }\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  togglePassword() {\n    if (this.password === \"password\") {\n      this.password = \"text\";\n      this.show = true;\n    } else {\n      this.password = \"password\";\n      this.show = false;\n    }\n  }\n\n  toggelConfirmPassword() {\n    if (this.cfPassword === \"password\") {\n      this.cfPassword = \"text\";\n      this.cpShow = true;\n    } else {\n      this.cfPassword = \"password\";\n      this.cpShow = false;\n    }\n  }\n}\n","<div class=\"container-fluid\">\n    <div class=\"row d-flex justify-content-center\">\n        \n        <div class=\"col-md-5 col-lg-4 col-sm-8\">\n            <div class=\"d-flex justify-content-center\">\n                <img src=\"https://mdbootstrap.com/img/logo/mdb-transaprent-noshadows.png\" alt=\"Logo\" class=\"my-3 mx-auto\">\n            </div>\n            <!-- Phone Number -->\n            <div class=\"card my-3\" *ngIf=\"registerSteps.step1\">\n                <div class=\"card-body\">\n\n                    <!-- Title -->\n                    <h4 class=\"card-title\"><b>Verify Mobile Number</b></h4>\n                    <!-- Text -->\n                    <form #verifyMobileNumberForm=\"ngForm\" class=\"text-left\" (ngSubmit)=\"generateOtp(verifyMobileNumberForm.valid)\">\n                        <!-- Mobile Number -->\n                        <label for=\"\" class=\"m-0 small mt-3\">Enter mobile number below</label>\n                        <input name=\"mobile\" type=\"text\" id=\"defaultSignupFormEmail\" [(ngModel)]=\"mobile\" class=\"form-control\" placeholder=\"Enter 10 digit mobile number\" oninput=\"this.value=this.value.replace(/[^\\d]/,'')\"\n                         maxlength=\"10\" minlength=\"10\" autocomplete=\"off\" required>\n                        <p *ngIf=\"verifyMobileNumberForm.submitted && !mobile\" class=\"deep-orange-text small m-0\">\n                            Please provide a mobile number!\n                        </p>\n                       <p *ngIf=\"verifyMobileNumberForm.submitted && verifyMobileNumberForm.invalid\" class=\"deep-orange-text small m-0\">\n                            Please enter upto 10 digits\n                       </p>\n                        <!-- <p *ngIf=\"verifyMobileNumberForm.submitted && mobile.minLength\">MINLENGTH</p> -->\n                        <!-- <p class=\"m-0 small mt-3\">We'll send you verification code on this number</p> -->\n\n                        <!-- Generate OTP -->\n                        <button class=\"btn elegant-color text-white btn-sm btn-block my-4 rounded\" type=\"submit\">Next</button>\n                    </form>\n\n                    <form class=\"text-left\" action=\"#!\" *ngIf=\"registerSteps.step2\">\n                        <!-- OTP Number -->\n                        <label for=\"\" class=\"m-0 small mt-3\">Enter OTP below</label>\n                        <input type=\"text\" id=\"defaultSignupFormEmail\" class=\"form-control\" placeholder=\"\" oninput=\"this.value=this.value.replace(/[^\\d]/,'')\" maxlength=\"6\" autocomplete=\"off\">\n\n                        <!-- Generate OTP -->\n                        <button class=\"btn elegant-color text-white btn-sm btn-block my-4 rounded\" type=\"submit\">Verify OTP</button>\n\n                    </form>\n                </div>\n            </div>\n\n            <!-- Signup Form -->\n            <div class=\"card my-3\" *ngIf=\"registerSteps.step3\">\n                <div class=\"card-body\">\n\n                    <!-- Title -->\n                    <h4 class=\"card-title\"><b>Create Account</b></h4>\n                    <!-- Text -->\n                    <form class=\"text-left\" [formGroup]=\"registerForm\" (ngSubmit)=\"submitRegisterForm(registerForm.valid)\">\n\n                        <!-- Name -->\n                        <label for=\"\" class=\"m-0 small mt-3\">Name</label>\n                        <input type=\"email\" formControlName=\"name\" id=\"defaultSignupFormEmail\" class=\"form-control\" placeholder=\"Your Name\">\n                        <p *ngIf=\"!registerForm.get('name').valid && submitFormAttempt && registerForm.get('name').hasError('required')\" class=\"deep-orange-text small m-0\">\n                            Please provide a name!\n                        </p>\n\n                        <!-- Email -->\n                        <label for=\"\" class=\"m-0 small mt-3\">Email</label>\n                        <input type=\"email\" formControlName=\"email\" id=\"defaultSignupFormEmail\" class=\"form-control\" placeholder=\"E-mail\">\n                        <p *ngIf=\"!registerForm.get('email').valid && submitFormAttempt && registerForm.get('email').hasError('required')\" class=\"deep-orange-text small m-0\">\n                            Please provide a email!\n                        </p>\n                        <p *ngIf=\"registerForm.get('email').hasError('email')\" class=\"deep-orange-text small m-0\">\n                            Please provide a valid email!\n                        </p>\n                        <!-- Password -->\n                        <label for=\"\" class=\"m-0 small mt-3\">Password</label>\n                        <span style=\"display:flex\">\n                                <input type=\"password\" \n                                formControlName=\"password\" \n                                id=\"defaultSignupFormPassword\" \n                                class=\"form-control\" \n                                placeholder=\"Password\"\n                                [type]=\"password\">\n                                <button class=\"btn border\" (click)=\"togglePassword()\" type=\"button\"> \n                                    <i class=\"fa fa-eye\" aria-hidden=\"true\" *ngIf=\"!show\"></i>\n                                    <i class=\"fa fa-eye-slash\" aria-hidden=\"true\" *ngIf=\"show\"></i>\n                                </button>\n                        </span>\n                        <p *ngIf=\"!registerForm.get('password').valid && submitFormAttempt && registerForm.get('password').hasError('required')\" class=\"deep-orange-text small m-0\">\n                            Please provide a password!\n                        </p>\n                        <p *ngIf=\"!registerForm.get('password').valid && submitFormAttempt && registerForm.get('password').hasError('minLength')\" class=\"deep-orange-text small m-0\">\n                            Please provide a password with atleast 6 characters!\n                        </p>\n                        <!-- Repeat Password -->\n                        <label for=\"\" class=\"m-0 small mt-3\">Confirm Password</label>\n                        <span style=\"display: flex\">\n                        <input type=\"password\"\n                         formControlName=\"confirmPassword\" \n                         id=\"defaultSignupFormPassword\" \n                         class=\"form-control\" \n                         placeholder=\"Confirm Password\"\n                         [type]=\"cfPassword\">\n                                <button class=\"btn border\" (click)=\"toggelConfirmPassword()\" type=\"button\"> \n                                        <i class=\"fa fa-eye\" aria-hidden=\"true\" *ngIf=\"!cpShow\"></i>\n                                        <i class=\"fa fa-eye-slash\" aria-hidden=\"true\" *ngIf=\"cpShow\"></i>\n                                    </button>\n                        </span>\n                        <p *ngIf=\"!registerForm.get('confirmPassword').valid && submitFormAttempt && registerForm.get('confirmPassword').hasError('required')\" class=\"deep-orange-text small m-0\">\n                            Please provide a confirm password!\n                        </p>\n                        <p *ngIf=\"!registerForm.get('confirmPassword').valid && submitFormAttempt && registerForm.get('confirmPassword').hasError('minLength')\" class=\"deep-orange-text small m-0\">\n                            Please provide a confirm password with atleast 6 characters!\n                        </p>\n                        <p *ngIf=\"registerForm.get('confirmPassword').dirty && registerForm.get('confirmPassword').value !== registerForm.get('password').value\" class=\"deep-orange-text small m-0\">\n                            Password does not match!\n                        </p>\n                        <!-- Sign in button -->\n                        <button class=\"btn elegant-color text-white btn-sm btn-block my-4 rounded\" type=\"submit\">Create Account</button>\n                        <p class=\"small\">By continuing, you agree to our <a href=\"\">Terms of Use</a> and <a href=\"\">Privacy Policy</a>.</p>\n\n                    </form>\n                </div>\n            </div>\n<!-- <ng-container *ngIf=\"registerSteps.step3\"> -->\n            <hr class=\"my-4\">\n            <div class=\"d-flex justify-content-center\">\n                <p class=\"mx-auto bg-white small d-inline-block px-2 text-black-50\" style=\"margin-top: -36px;\">Already a Member ?</p>\n            </div>\n            <!-- Create Account Button -->\n            <a routerLink=\"/auth/login\" role=\"button\" class=\"btn-block unique-color text-white btn btn-sm rounded my-3\">Login your account</a>  \n        <!-- </ng-container>           -->\n        </div>\n    </div>\n    \n</div>"]}